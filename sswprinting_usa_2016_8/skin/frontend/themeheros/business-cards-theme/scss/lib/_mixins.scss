// ==========	mixins	==========	//

	// ==========	text and form elements	==========	//

//	"inputs-text" - mixin for global styling of all inputs
//	Use example:
//	@include inputs-text {
//		<	some style	>
//	}
@mixin inputs-text {
	input[type="text"],
	input[type="password"],
	input[type="email"],
	input[type="tel"],
	input[type="number"],
	input[type="search"],
	input[type="url"],
	input[type="date"],
	input[type="datetime"],
	input[type="datetime-local"],
	input[type="month"],
	input[type="week"],
	textarea {
		@content;
	}
}

/*	*************************************************************	*/

//	for placeholders style use Compass mixin "input-placeholder"
//	more on: http://compass-style.org/reference/compass/css3/user_interface/
//  		http://compass-style.org/examples/compass/css3/input-placeholder/
//	Use example:
//	input[type="text"] {
//		@include input-placeholder {
//			color: #bfbfbf;
//			font-style: italic;
//		}
//	}

/*	*************************************************************	*/

//	"font-smoothing" - for better rendering fonts on "mac os"
@mixin font-smoothing($value: on) {
	@if $value == on {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
	@else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}

/*	*************************************************************	*/

//  "unselectable" - prevents from user selection
@mixin unselectable() {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

/*	*************************************************************	*/

//  "selection" - custom style when user select some text
@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}

/*	*************************************************************	*/

	// ==========	Images	==========	//

//	"image-size" - sets image dimensions;
//	accept: relative image path from image directory in config.rb
//	Use example:
//	div {
//		@include image-size('image.png');
//	}
@mixin image-size($path){
	width: image-width($path);
	height: image-height($path);
}

/*	*************************************************************	*/


	// ==========	Layouts	==========	//

//	"column-layout" - create three column layout styles
//	accept: main content class; left sidebar class; right sidebar class; sidebars dimensions;
//	Use example:
//	.l-content-wrap {
//		@include column-layout('.l-content', '.l-left-sidebar', '.l-right-sidebar', 220px, 100px);
//	}
//	HTML example
//	<section class="l-content-wrap has-left-sidebar has-right-sidebar">
//		<section class="l-content">
//		</section>
//		<section class="l-left-sidebar">
//		</section>
//		<section class="l-right-sidebar">
//		</section>
//	</section>
//	.l-content-wrap - main columns wrap.
//	If you have left sidebar add class .has-left-sidebar to .l-content-wrap
//	If you have right sidebar add class .has-right-sidebar to .l-content-wrap
@mixin column-layout(
	$center,
	$leftAside,
	$rightAside,
	$leftAsideWidth : 0,
	$rightAsideWidth : 0
) {
	@extend %clearfix;
	position: relative;
	&.has-left-sidebar {
		padding-left: $leftAsideWidth;
	}
	&.has-right-sidebar {
		padding-right: $rightAsideWidth;
	}
	%gen_Styles {
		float: left;
		position: relative;
	}
	#{$center} {
		@extend %gen_Styles;
		width: 100%;
	}
	#{$leftAside} {
		@extend %gen_Styles;
		margin-left: -100%;
		right: $leftAsideWidth;
		width: $leftAsideWidth;
	}
	#{$rightAside} {
		@extend %gen_Styles;
		margin-right: -100%;
		width: $rightAsideWidth;
	}
}

/*	*************************************************************	*/

//	"justifyBlocks" - Justify stretch
@mixin justifyBlocks{
	text-align: justify;
	& > *{
		display: inline-block;
		vertical-align: middle;
	}
	&:after {
		width: 100%;
		height: 0px;
		visibility: hidden;
		overflow: hidden;
		content: '';
		display: inline-block;
	}
}
%clearfix{
	&:after{
		content: '';
		display: table;
		width: 100%;
		clear: both;
	}
}